const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const bcrypt = require('bcrypt-nodejs');

const UserSchema = new Schema({
  // user-id here generated by Mongo will be foreign key in document schema
  firstname: {
    type: String,
    required: true,
    trim: true,
  },
  lastname: {
    type: String,
    required: true,
    trim: true,
  },
  username: {
    type: String,
    required: true,
    lowercase: true,
    unique: true,
    trim: true,
  },
  email: {
    required: true,
    unique: true,
    type: String,
    trim: true,
  },
  password: {
    type: String,
    required: true,
    select: false,
    trim: true,
  },
  // Create or Use role relationship from roleSchema.
  title: {
    required: false,
    ref: 'Role',
    type: String,
  },
});

// UserSchema.add(
//   {
//     role: {
//       required: false,
//       ref: 'Role',
//       // type: Schema.Types.ObjectId,
//       type: String,
//     },
//   }
// );

// hash the password before it is saved
// Call middlewear before password is saved
UserSchema.pre('save', function(next) {
  const user = this;

// If the user hasn't modified their password or if the password isn't new, move on
// because it's already been hashed
  if (!user.isModified('password')) {
    return next();
  }

// Else hash it and pass it on to the next function
  bcrypt.hash(user.password, null, null, function (err, hash){
    if (err) {
      return next(err);
    }

      // Change password to hashed version and move on
    user.password = hash;
    next();
  });
});

  // Compare password with the hash we created for it to check it its the one
UserSchema.methods.comparePassword = function(password) {
  const user = this;
  return bcrypt.compareSync(password, user.password);
};

module.exports = mongoose.model('User', UserSchema);
