const mongoose = require('mongoose'),
  Schema = mongoose.Schema,
  bcrypt = require('bcrypt-nodejs');

const UserSchema = new Schema({
  // user-id here generated by Mongo will be foreign key in document schema
  firstname: {
    type: String,
    required: true,
    trim: true,
  },
  lastname: {
    type: String,
    required: true,
    trim: true,
  },
  username: {
    type: String,
    required: true,
    lowercase: true,
    unique: true,
    trim: true
  },
  email: {
    required: true,
    unique: true,
    type: String,
    trim: true,
  },
  password: {
    type: String,
    required: true,
    select: false,
    trim: true,
  },
  // Create or Use role relationship from roleSchema. User is either a viewer, editor or an admin
  // role: {
  //   required: true,
  //   ref: 'Role',
  //   type: Schema.Types.ObjectId,
  // },
});

// hash the password before it is saved
// Call middlewear before password is saved
UserSchema.pre('save', function(next) {
  var user = this;

// If the user hasn't modified their password or if the password isn't new, move on
// because it's already been hashed
  if (!user.isModified('password'))
    return next();

// Else hash it and pass it on to the next function
  bcrypt.hash(user.password, null, null, function(err, hash){
    if (err)
      return next(err);

      // Change password to hashed version and move on
    user.password = hash;
    next();
  });
});

  // Compare password with the hash we created for it to check it its the one
UserSchema.methods.comparePassword = function(password) {
  var user = this;
  return bcrypt.compareSync(password, user.password);
};

module.exports = mongoose.model('User', UserSchema);
